name: 'Terraform Deploy [Azure]'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Azure deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: Plan the changes or plan and apply the changes
        default: 'plan only'
        type: choice
        options:
          - 'plan only'
          - 'plan and apply'
      refresh:
        description: 'Use the refresh-only flag on this plan (and plan only)'
        type: boolean
        required: false
        default: false

defaults:
  run:
    working-directory: ./terraform-azure

# Permissions for OIDC authentication
permissions:
  id-token: write
  contents: write
  issues: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_SKIP_PROVIDER_REGISTRATION: true

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6
          terraform_wrapper: false

      # Initialise a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: >
          terraform init
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RESOURCE_GROUP }}"
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT_NAME }}"
          -backend-config="container_name=${{ secrets.TERRAFORM_STATE_STORAGE_CONTAINER_NAME }}"
          -backend-config="key=${{ secrets.TERRAFORM_STATE_KEY }}"

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates Terraform input variables
      - name: Generate Terraform Variables
        shell: bash
        env:
          WEB_SECRETS: ${{ toJSON(secrets) }}
          WEB_VARS: ${{ toJSON(vars) }}
        run: |
          printf '%s\n' "$WEB_SECRETS" > tmp-secrets.json
          printf '%s\n' "$WEB_VARS" > tmp-vars.json
          jq 'with_entries(.key |= ascii_downcase)' tmp-secrets.json > web-secrets.auto.tfvars.json
          jq 'with_entries(.key |= ascii_downcase)' tmp-vars.json > web-vars.auto.tfvars.json

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0


          if ${{ inputs.refresh }}; then
            terraform plan -detailed-exitcode -no-color -refresh-only -out tfplan || export exitcode=$?
          else
            terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          fi
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Terraform Apply
      - name: Terraform Apply
        if: ${{ inputs.action == 'plan and apply' && ! inputs.refresh }}
        run: echo "Action is ${{inputs.action}}, refresh is ${{ inputs.refresh }}" # ...for now, avoid accidentally running apply if the conditions are wrong
        #run: terraform apply -auto-approve tfplan/tfplan