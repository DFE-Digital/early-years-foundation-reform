name: Deploy to staging

on:
  workflow_dispatch:
    inputs:
      version:
        description: Which version are you creating? ("vx.x.x")
        required: true
      ref:
        description: Git ref to deploy
        required: true
        default: develop
jobs:
  deploy-to-staging:
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/help-for-early-years-providers-prod
<<<<<<< HEAD
=======
    outputs:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
>>>>>>> 503-credentials
    steps:
      - name: Check workflow concurrency
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check tag format
        run: |
          echo ${{ github.event.inputs.version }} | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$'

      - name: Pin Terraform version
<<<<<<< HEAD
        uses: hashicorp/setup-terraform@v1.3.2
=======
        uses: hashicorp/setup-terraform@v1.2.1
>>>>>>> 503-credentials
        with:
          terraform_version: 0.14.0

      - uses: actions/checkout@v2
        name: Checkout Code
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Tag deployment
        run: |
          git tag --force ${{ github.event.inputs.version }}
          git push --force origin refs/tags/${{ github.event.inputs.version }}
          echo "HEAD=$(git rev-parse ${{ github.event.inputs.version }})" >> $GITHUB_ENV

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: retag docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.HEAD }}
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.HEAD }} ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.version }}
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.version }}

      - name: Deploy to staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          TF_VAR_paas_user: ${{ secrets.GOVPAAS_STAG_USERNAME }}
          TF_VAR_paas_password: ${{ secrets.GOVPAAS_STAG_PASSWORD }}
          TF_VAR_statuscake_username: ${{ secrets.STATUSCAKE_USERNAME }}
          TF_VAR_statuscake_apikey: ${{ secrets.STATUSCAKE_APIKEY }}
        run: |
          echo "ENV:"
          echo ${{env}}
          export TF_VAR_paas_app_docker_image=${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.version }}
          cd terraform/app
          terraform init -reconfigure -input=false -backend-config="bucket=${{secrets.AWS_BUCKET_STAGING}}"
<<<<<<< HEAD
          terraform apply -input=false -auto-approve -var-file ../workspace-variables/preprod.tfvars -var='secret_paas_app_env_values={"RAILS_MASTER_KEY":"${{secrets.RAILS_MASTER_KEY_STAGING}}", RELEASE_VERSION":"${{github.event.inputs.version}}"}'

      - name: Set release notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$(git log --first-parent --pretty='format: %b (%an)' $(git tag -l | sort -V | tail -2 | head -1)..${{ github.event.inputs.version }})" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post release notes on eyfs-dev-alerts
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: eyfs-dev-alerts
          SLACK_USERNAME: Release notes bot
          SLACK_TITLE: Version ${{ github.event.inputs.version }} release notes
          SLACK_MESSAGE: ${{ env.RELEASE_NOTES }}
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.ALERTMANAGER_SLACK_URL }}
=======
          terraform plan -var-file ../workspace-variables/test.tfvars
          terraform apply -input=false -auto-approve -var-file ../workspace-variables/test.tfvars -var='secret_paas_app_env_values={"RAILS_MASTER_KEY":"${{secrets.RAILS_MASTER_KEY_STAGING}}", "AWS_ACCESS_KEY_ID": "${{secrets.AWS_ACCESS_KEY_ID_STAGING}}", "AWS_SECRET_ACCESS_KEY": "${{secrets.AWS_SECRET_ACCESS_KEY_STAGING}}", "AWS_REGION": "${{secrets.AWS_REGION_STAGING}}", "AWS_BUCKET": "${{secrets.AWS_BUCKET_STAGING}}", "BASIC_AUTH_USER": "${{secrets.BASIC_AUTH_USER}}", "BASIC_AUTH_PASSWORD": "${{secrets.BASIC_AUTH_PASSWORD}}", "GOOGLE_ANALYTICS_CONTAINER_ID": "${{ secrets.GA_CONTAINER_ID_STAGING }}", "GOOGLE_ANALYTICS_TRACKING_ID": "${{ secrets.GA_TRACKING_ID_STAGING }}"}'
>>>>>>> 503-credentials
